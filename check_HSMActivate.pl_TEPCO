#!/usr/bin/perl
#
# Author: 
# Marcus Rochelle
#
# Description:
# This plugin will ssh to a system cm and perform a service process check.
#
# Shortname will be the name of the NagiosXI plugin.
# Critical will be what causes the check to become critical.
# Device will be the network equipment to run this plugin against.
#
# 09-13-2012 Revised by Marcus Rochelle
# 09-10-2014 Updated to check for recent timestamp of cron log.
# 09-10-2014 updated to provide performance data.
# 03-31-2015 Revised to use remote host system times.
# 10-12-2015 Revised to validate hostdate and try 2nd command if 1st command fails.
# 04-22-2016 Revised to disable strick host checking which adds a host key for the host name.
#            Since 3 IPs are associated with host, strick host checking will fail.
# 02-25-2021 Revised for check_Nagios_logtime.pl by Marcus Rochelle
# 01-19-2022 Revised to restart the monitoring engine for recovery on critical alerts.            
# 
#####################

use Nagios::Monitoring::Plugin;
use Date::Parse;
open STDERR, '>/dev/null';

# Define the plugin and usage.
$np = Nagios::Monitoring::Plugin->new(
  shortname =>"check_Nagios_logtime.pl",
  timeout => 60,
  usage => "Usage: %s [--hostaddr Host --secs seconds]",
);

# Add command line arg 1
$np->add_arg(
  spec => "hostaddr=s",
  help => "--hostaddr=HOSTADDR\n Host system to SSH for checking the indicated service.",
  required => 1,
);

# Add command line arg 2
  $np->add_arg(
  spec => "secs=s",
  help => "--secs=SECONDS\n Maximum delay in seconds for cron log timestamp before error condition.",
  required => 0,
);
       
$np->getopts;
$verbose = $np->opts->verbose;
my $c=1;
# DNS name conversion via ping #
$hostaddr = $np->opts->hostaddr;
$msg[$c] = "Host: $hostaddr"; $c++;
($hostaddr) = (`/bin/ping $hostaddr -c 1 -q|head -1` =~ /(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/);
$msg[$c] = "IP: $hostaddr"; $c++;

$secs = $np->opts->secs;
if ( ! $secs ) { $secs = 1800 };
$CMD = "/usr/bin/ps -ef |grep 'sbin/cron'|grep -v grep|head -1";
$CMD_log= "ls -lrt /usr/local/nagios/var/nagios.log |awk '{print \$6, \$7, \$8}'";
$CMD1_hostdate= "date |awk '{ print \$2, \$3, \$4 }'";
$CMD2_hostdate= "date |awk '{ print \$2, \$3, \$4, \$5, \$6 }'";
$SHELL = "/usr/bin/ssh -o ConnectionAttempts=3 -o CheckHostIP=no -o StrictHostKeyChecking=no";

# Get data on the remote host via SSH.
my $hostdate = `$SHELL $hostaddr $CMD1_hostdate`; chomp $hostdate;

# Verify valid time response for hostdate.
if ($hostdate !~ /(\d+):(\d\d)/) { 
   $hostdate = `$SHELL $hostaddr $CMD2_hostdate`; chomp $hostdate;
   print "Using CMD2_hostdate: $CMD2_hostdate\n" if ($verbose); 
}
print "hostdate is $hostdate\n" if ($verbose); 
$curtime_secs = str2time($hostdate);
print "Current Time is $hostdate. Total secs = $curtime_secs.\n" if ($np->opts->verbose);
my $logtime = `$SHELL $hostaddr $CMD_log`; chomp $logtime; $log= "/usr/local/nagios/var/nagios.log";
if (! $logtime) { $CMD_log= "ls -lrt /usr/local/nagios/var/nagios.log |awk '{print \$6, \$7, \$8}'";
   $logtime = `$SHELL $hostaddr $CMD_log`; chomp $logtime; $log= "/usr/local/nagios/var/nagios.log";
}
# If log time can't be found use current date timestamp.
# if (! $logtime) { $logtime = $hostdate; }
# my $alive = `$SHELL $hostaddr $CMD`; chomp $alive;
# if (! $alive) { 
#   $CMD = "/bin/ps -ef |grep 'cron'|grep -v grep|head -1";
#   $alive = `$SHELL $hostaddr $CMD`; chomp $alive;
#}
print "Variables logtime: $logtime\nhostdate: $hostdate\n" if ($np->opts->verbose);
 
if ((! $logtime) || (! $hostdate)) { 
   $pluginstate = "WARNING"; $msg[$c] = "Missing all required aurguments:\n$hostdate\n$logtime\n$alive";
   my $msg = "@msg";
   $np->nagios_exit($pluginstate, $msg );
}

$logts = str2time($logtime); print "Unix time for nagios log is $logts\n" if ($np->opts->verbose);
$tdiff = ($curtime_secs - $logts);
#if (( $alive =~ m/cron/ ) && (($curtime_secs - $logts) < $secs)) {
if (($curtime_secs - $logts) < $secs) {
   $pluginstate = "OK"; $msg[$c] = "    $logtime. Time since last update to Nagios log in seconds: $tdiff.\nNagios Log: $log\n$alive|nagios=1; secs=$tdiff;"; }
else {
   $pluginstate = "CRITICAL"; 
   $msg[$c] = "The Nagios log has not updated recently. The Monitoring Engine will be restared to recover.\nTime since last update to log in seconds: $tdiff.\n    $logtime\nNagios Log: $log\n$alive|nagios=0; secs=$tdiff;"; 
   $CMD98 = "logger 'Time since last update to log in seconds: $tdiff. Restarting the Monitoring Engine to recover.'";
   $CMD99 = "sudo systemctl restart nagios";
   `$SHELL $hostaddr '"$CMD98".";"."$CMD99"'`;  
}
my $msg = "@msg";
$np->nagios_exit($pluginstate, $msg );
